;;; -*- mode:emacs-lisp; indent-tabs-mode:nil; tab-width:2 -*-
;;;
;;; Time-stamp: <2015-04-13 16:14:46 mbykov@gmail.com>
;;;
;;; Stuff I use while hacking diglossa
;;;

(defun dg-compare-parallell (&optional no-msgs-p)
  (interactive)
  (let ((eop nil)
        (count 0)
        (line_num 0)
        (count_r 0))
    (save-excursion
      (if (< (point) (point-max))
          (progn
            (mark-paragraph)
            (narrow-to-region (point) (mark))
            (while (and (looking-at "$") (< (point) (point-max)))
              (beginning-of-line)
              (forward-line 1))
            (while (not (looking-at "$"))
              (setq count (1+ count))
              (forward-sentence 1))
            (widen)
            (while (and (looking-at "$") (< (point) (point-max)))
              (beginning-of-line))

            (goto-line (line-number-at-pos) (window-buffer (next-window)))
            (mark-paragraph)
            (narrow-to-region (point) (mark))
            (while (and (looking-at "$") (< (point) (point-max)))
              (beginning-of-line)
              (forward-line 1))
            (while (not (looking-at "$"))
              (setq count_r (1+ count_r))
              (forward-sentence 1))
            (widen)
            (while (and (looking-at "$") (< (point) (point-max)))
              (beginning-of-line))
            (set-mark nil)
            (goto-line (line-number-at-pos) (window-buffer (next-window)))

            (forward-line 1)
            (if (= count count_r)
                (progn
                  (beginning-of-line)
                  (forward-line 1)
                  (setq eop (point))
                  (recenter)
                  (goto-line (line-number-at-pos) (window-buffer (next-window)))
                  (recenter)
                  (goto-line (line-number-at-pos) (window-buffer (next-window)))
                  (message "there are %d %d sentences in this paragraph." count count_r)
                  )
              (message "=FALSE= are %d %d sentences in this paragraph." count count_r)
              )
            )))
    (if eop (goto-char eop))
    count))


(defun dg-both-home ()
  (interactive)
  (beginning-of-buffer)
  (next-multiframe-window)
  (beginning-of-buffer)
  (next-multiframe-window)
  )

(defun dg-both-end ()
  (interactive)
  (end-of-buffer)
  (next-multiframe-window)
  (end-of-buffer)
  (next-multiframe-window)
  )

(defun dg-other-buffer-same-pos ()
  (interactive)
  (goto-line (line-number-at-pos) (window-buffer (next-window))))

(defun dg-other-buffer-same-pos-recenter ()
  (interactive)
  (recenter)
  (goto-line (line-number-at-pos) (window-buffer (next-window)))
  (recenter)
  )


(defun dg-both-scroll-down ()
  (interactive)
  (scroll-down)
  (next-multiframe-window)
  (scroll-down)
  (next-multiframe-window)
  )

(defun dg-both-scroll-up ()
  (interactive)
  (scroll-up)
  (next-multiframe-window)
  (scroll-up)
  (next-multiframe-window)
  )

(defun dg-both-up-some ()
  (interactive)
  (scroll-up-line 20)
  (forward-line -20)
  (goto-line (line-number-at-pos) (window-buffer (next-window)))
  (scroll-up-line 20)
  (forward-line -20)
  (goto-line (line-number-at-pos) (window-buffer (next-window)))
  )

(defun dg-both-toggle ()
  (interactive)
  (toggle-truncate-lines)
  (next-multiframe-window)
  (toggle-truncate-lines)
  (next-multiframe-window)
  )

(defun diglossa-modes-hook ()
  ;; (local-set-key "\M-&" 'count-sentences-in-paragraph)
  (customize-set-variable 'sentence-end "[.?!]")
  (local-set-key (kbd "C-c c") 'dg-compare-parallell)
  (local-set-key (kbd "C-c C-t") 'dg-both-toggle)
  (local-set-key (kbd "C-c C-p") 'dg-both-scroll-down)
  (local-set-key (kbd "C-c C-n") 'dg-both-scroll-up)
  (local-set-key (kbd "C-c C-x") 'dg-both-up-some)
  (local-set-key (kbd "C-c C-h") 'dg-both-home)
  (local-set-key (kbd "C-c C-e") 'dg-both-end)
  (local-set-key (kbd "C-c C-l") 'dg-other-buffer-same-pos)
  (local-set-key (kbd "<shift> <left>") 'dg-other-buffer-same-pos)
  (local-set-key (kbd "<shift> <right>") 'dg-other-buffer-same-pos)
;;  (global-set-key [( shift up)] (lambda () (interactive) (scroll-down 1)))
  (global-set-key [( shift left)] (lambda () (interactive) (dg-other-buffer-same-pos-recenter)))
  (global-set-key [( shift right)] (lambda () (interactive) (dg-other-buffer-same-pos-recenter)))
  ;; (local-set-key [(shift left)] (dg-other-buffer-same-pos))
  ;; (local-set-key [(shift right)] (dg-other-buffer-same-pos))
  )


(add-hook 'text-mode-hook 'diglossa-modes-hook)
(add-hook 'fundamental-mode-hook 'diglossa-modes-hook)
